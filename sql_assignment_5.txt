
1)Find the titles of all movies directed by Steven Spielberg. (1 point possible)

 select title from movie where director="Steven Spielberg";
+-------------------------+
| title                   |
+-------------------------+
| E.T.                    |
| Raiders of the Lost Ark |
+-------------------------+

2)Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order. (1 point possible)

select distinct year from rating rt inner join movie m on m.mid=rt.mid where stars=4 or stars=5 order by year asc;
+------+
| year |
+------+
| 1937 |
| 1939 |
| 1981 |
| 2009 |
+------+

3)Find the titles of all movies that have no ratings. (1 point possible)

 select title from movie where mid not in (select mid from rating);
+-----------+
| title     |
+-----------+
| Star Wars |
| Titanic   |
+-----------+

4)Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date. (1 point possible)

select name from reviewer r inner join rating rt on rt.rid=r.rid where ratingdate is null;
+---------------+
| name          |
+---------------+
| Daniel Lewis  |
| Chris Jackson |
+---------------+

5)Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars. (1 point possible)

select r.name,m.title,rt.stars,rt.ratingDate from rating rt inner join reviewer r on rt.rid=r.rid inner join movie m on m.mid=rt.mid order by r.name,m.title,rt.stars;
+------------------+-------------------------+-------+------------+
| name             | title                   | stars | ratingDate |
+------------------+-------------------------+-------+------------+
| Ashley White     | E.T.                    |     3 | 2011-01-02 |
| Brittany Harris  | Raiders of the Lost Ark |     2 | 2011-01-30 |
| Brittany Harris  | Raiders of the Lost Ark |     4 | 2011-01-12 |
| Brittany Harris  | The Sound of Music      |     2 | 2011-01-20 |
| Chris Jackson    | E.T.                    |     2 | 2011-01-22 |
| Chris Jackson    | Raiders of the Lost Ark |     4 | NULL       |
| Chris Jackson    | The Sound of Music      |     3 | 2011-01-27 |
| Daniel Lewis     | Snow White              |     4 | NULL       |
| Elizabeth Thomas | Avatar                  |     3 | 2011-01-15 |
| Elizabeth Thomas | Snow White              |     5 | 2011-01-19 |
| James Cameron    | Avatar                  |     5 | 2011-01-20 |
| Mike Anderson    | Gone with the wind      |     3 | 2011-01-09 |
| Sarah Martinez   | Gone with the wind      |     2 | 2011-01-22 |
| Sarah Martinez   | Gone with the wind      |     4 | 2011-01-27 |
+------------------+-------------------------+-------+------------+

6)For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie. (1 point possible)

select r.name,m.title from rating rt1 inner join reviewer r on rt1.rid=r.rid inner join movie m on m.mid=rt1.mid inner join rating rt2 on rt2.rid=r.rid where rt1.mid=rt2.mid and rt1.stars>rt2.stars and rt1.ratingdate>rt2.ratingdate;
+----------------+--------------------+
| name           | title              |
+----------------+--------------------+
| Sarah Martinez | Gone with the wind |
+----------------+--------------------+


7)For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title. (1 point possible)

select title,max(stars) from movie m inner join rating rt on rt.mid=m.mid group by rt.mid order by title;
+-------------------------+------------+
| title                   | max(stars) |
+-------------------------+------------+
| Avatar                  |          5 |
| E.T.                    |          3 |
| Gone with the wind      |          4 |
| Raiders of the Lost Ark |          4 |
| Snow White              |          5 |
| The Sound of Music      |          3 |
+-------------------------+------------+

8)For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title. (1 point possible)

select title,(max(stars)-min(stars)) as rating_spread from rating r inner join movie m on r.mid=m.mid group by r.mid order by rating_spread desc,title;
+-------------------------+---------------+
| title                   | rating_spread |
+-------------------------+---------------+
| Avatar                  |             2 |
| Gone with the wind      |             2 |
| Raiders of the Lost Ark |             2 |
| E.T.                    |             1 |
| Snow White              |             1 |
| The Sound of Music      |             1 |
+-------------------------+---------------+

9)Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980. (Make sure to calculate the average rating for each movie, then the average of those averages for movies before 1980 and movies after. Don't just calculate the overall average rating before and after 1980.) (1 point possible)

select avg(t1.bef_1980) - avg(t2.aft_1980) from((select avg(stars) as bef_1980 from movie m inner join rating rt on rt.mid=m.mid where year<1980 group by rt.mid)t1,(select avg(stars) as aft_1980 from movie m inner join rating rt on rt.mid=m.mid where year>1980 group by rt.mid)t2);
+-------------------------------------+
| avg(t1.bef_1980) - avg(t2.aft_1980) |
+-------------------------------------+
|                          0.05556667 |
+-------------------------------------+

10)Find the names of all reviewers who rated Gone with the Wind. (1 point possible)

select distinct(name) from reviewer r inner join rating rt on r.rid = rt.rid inner join movie m on rt.mid=m.mid where title="Gone with the Wind";
+----------------+
| name           |
+----------------+
| Sarah Martinez |
| Mike Anderson  |
+----------------+

11)For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. (1 point possible)

 select r.name,m.title,rt.stars from movie m inner join rating rt on m.mid=rt.mid inner join reviewer r on r.rid=rt.rid where director=name;
+---------------+--------+-------+
| name          | title  | stars |
+---------------+--------+-------+
| James Cameron | Avatar |     5 |
+---------------+--------+-------+

12)Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".) (1 point possible)

select * from ( select name as reviewer_movie_names from reviewer union select title as reviewer_movie_name from movie)t order by t.reviewer_movie_names;
+-------------------------+
| reviewer_movie_names    |
+-------------------------+
| Ashley White            |
| Avatar                  |
| Brittany Harris         |
| Chris Jackson           |
| Daniel Lewis            |
| E.T.                    |
| Elizabeth Thomas        |
| Gone with the wind      |
| James Cameron           |
| Mike Anderson           |
| Raiders of the Lost Ark |
| Sarah Martinez          |
| Snow White              |
| Star Wars               |
| The Sound of Music      |
| Titanic                 |
+-------------------------+

13)Find the titles of all movies not reviewed by Chris Jackson. (1 point possible)

select distinct(title) from movie where mid not in (select rt.mid from rating rt inner join reviewer r on r.rid=rt.rid where name="Chris Jackson");
+--------------------+
| title              |
+--------------------+
| Gone with the wind |
| Star Wars          |
| Titanic            |
| Snow White         |
| Avatar             |
+--------------------+

14)For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order. (1 point possible)

select distinct r1.name,r2.name from rating rt1 inner join rating rt2 on rt1.mid=rt2.mid inner join reviewer r1 on r1.rid=rt1.rid inner join reviewer r2 on r2.rid=rt2.rid where r1.name!=r2.name and r1.name<r2.name order by r1.name;
+------------------+------------------+
| name             | name             |
+------------------+------------------+
| Ashley White     | Chris Jackson    |
| Brittany Harris  | Chris Jackson    |
| Daniel Lewis     | Elizabeth Thomas |
| Elizabeth Thomas | James Cameron    |
| Mike Anderson    | Sarah Martinez   |
+------------------+------------------+

15)For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars. (1 point possible)

 select name,title,stars from reviewer r inner join rating rt on rt.rid=r.rid inner join movie m on m.mid=rt.mid where stars in (select min(stars) from rating);
+-----------------+-------------------------+-------+
| name            | title                   | stars |
+-----------------+-------------------------+-------+
| Sarah Martinez  | Gone with the wind      |     2 |
| Brittany Harris | The Sound of Music      |     2 |
| Brittany Harris | Raiders of the Lost Ark |     2 |
| Chris Jackson   | E.T.                    |     2 |
+-----------------+-------------------------+-------+

16)List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order. (1 point possible)

select title,avg(stars) as avg from rating rt inner join movie m on m.mid=rt.mid group by m.mid order by avg desc,title asc;
+-------------------------+--------+
| title                   | avg    |
+-------------------------+--------+
| Snow White              | 4.5000 |
| Avatar                  | 4.0000 |
| Raiders of the Lost Ark | 3.3333 |
| Gone with the wind      | 3.0000 |
| E.T.                    | 2.5000 |
| The Sound of Music      | 2.5000 |
+-------------------------+--------+

17)Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.) (1 point possible)

select distinct(name) from reviewer r inner join rating rt on rt.rid=r.rid where stars >=3;
+------------------+
| name             |
+------------------+
| Sarah Martinez   |
| Daniel Lewis     |
| Brittany Harris  |
| Mike Anderson    |
| Chris Jackson    |
| Elizabeth Thomas |
| James Cameron    |
| Ashley White     |
+------------------+

18)Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.) (1 point possible)

 select distinct(m1.director),m1.title,m2.title from movie m1 inner join movie m2 on m1.director=m2.director where m1.mid!=m2.mid and m1.title<m2.title order by m1.director,m1.title;
+------------------+--------+-------------------------+
| director         | title  | title                   |
+------------------+--------+-------------------------+
| James Cameron    | Avatar | Titanic                 |
| Steven Spielberg | E.T.   | Raiders of the Lost Ark |
+------------------+--------+-------------------------+

select distinct(m1.director),m1.title,m2.title from movie m1,movie m2 where m1.mid!=m2.mid and m1.director = m2.director group by m1.director having count(m1.director)>1 order by m1.director,m1.title;
+------------------+-------------------------+---------+
| director         | title                   | title   |
+------------------+-------------------------+---------+
| James Cameron    | Avatar                  | Titanic |
| Steven Spielberg | Raiders of the Lost Ark | E.T.    |
+------------------+-------------------------+---------+

19)Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) (1 point possible)

 select title,avg(stars) as avg2 from rating rt inner join movie m on m.mid=rt.mid group by rt.mid having avg2 = (select max(t.avg) as avg1 from (select title,avg(stars) as avg from rating rt inner join movie m on m.mid=rt.mid group by m.mid)t);
+------------+--------+
| title      | avg2   |
+------------+--------+
| Snow White | 4.5000 |
+------------+--------+

20)Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be more difficult to write in SQLite than other systems; you might think of it as finding the lowest average rating and then choosing the movie(s) with that average rating.) (1 point possible)

select title,avg(stars) as avg2 from rating rt inner join movie m on m.mid=rt.mid group by rt.mid having avg2 = (select min(t.avg) as avg1 from (select title,avg(stars) as avg from rating rt inner join movie m on m.mid=rt.mid group by m.mid)t);
+--------------------+--------+
| title              | avg2   |
+--------------------+--------+
| The Sound of Music | 2.5000 |
| E.T.               | 2.5000 |
+--------------------+--------+

21)For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. (1 point possible)

 select director,title,max(stars) from movie m inner join rating rt on m.mid=rt.mid where director is not null group by director;
+------------------+--------------------+------------+
| director         | title              | max(stars) |
+------------------+--------------------+------------+
| Victor Fleming   | Gone with the wind |          4 |
| Robert Wise      | The Sound of Music |          3 |
| Steven Spielberg | E.T.               |          4 |
| James Cameron    | Avatar             |          5 |
+------------------+--------------------+------------+
